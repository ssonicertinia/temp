name: Release Workflow

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-vsce'

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      publish_binary: ${{ steps.set-vars.outputs.publish_binary }}
      publish_extension: ${{ steps.set-vars.outputs.publish_extension }}
      tag_number: ${{ steps.set-vars.outputs.tag_number }}

    steps:
      - name: Set output variables based on tag
        id: set-vars
        run: |
          TAG="${GITHUB_REF##*/}"
          echo "Tag is: $TAG"

          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Standard release"
            echo "publish_binary=true" >> $GITHUB_OUTPUT
            echo "publish_extension=true" >> $GITHUB_OUTPUT
          elif [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-vsce$ ]]; then
            echo "VSCE-only release"
            echo "publish_binary=false" >> $GITHUB_OUTPUT
            echo "publish_extension=true" >> $GITHUB_OUTPUT
          else
            echo "Tag format not recognized"
            exit 1
          fi

          echo "tag_number=$TAG" >> $GITHUB_OUTPUT

  release-binary:
    if: ${{ needs.check-tag.outputs.publish_binary == 'true' }}
    needs: check-tag
    runs-on: ubuntu-latest
    env:
      TAG_NUMBER: ${{ needs.check-tag.outputs.tag_number }}
    steps:
      - name: Skip if not needed
        if: needs.check-tag.outputs.publish_binary != 'true'
        run: |
          echo "Skipping release-binary because publish_binary is false"
          exit 0

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.0

      - name: Build Binaries using Makefile
        run: make build-all-binaries
      
      - name: Assign executable permission to binary
        run: |
          chmod +x temp_linux_amd64
          ./temp_linux_amd64

      - name: Create GitHub Release and Upload assets on release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            temp.exe
            temp_darwin_amd64
            temp_darwin_arm64
            temp_linux_amd64
            temp_linux_arm64
          body: |
            ## üì¶ Binaries

            ```
            temp_linux_amd64
            temp_darwin_arm64
            temp.exe
            ```

            ## üöÄ What's in this release

            - üêß [`temp_linux_amd64` ‚Äî Linux (amd64)](https://github.com/${{ github.repository_owner }}/temp/releases/download/${{ needs.check-tag.outputs.tag_number }}/temp_linux_amd64)
            - üçè [`temp_darwin_arm64` ‚Äî macOS (ARM64 Apple Silicon)](https://github.com/${{ github.repository_owner }}/temp/releases/download/${{ needs.check-tag.outputs.tag_number }}/demo_darwin_arm64)
            - ü™ü [`temp.exe` ‚Äî Windows (amd64)](https://github.com/${{ github.repository_owner }}/temp/releases/download/${{ needs.check-tag.outputs.tag_number }}/temp.exe)
            - üß© VSCode extension (`.vsix`)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish-extension:
    if: >
      always() &&
      needs.check-tag.outputs.publish_extension == 'true' &&
      (
        needs.release-binary.result == 'success' || needs.release-binary.result == 'skipped'
      )
    needs: [check-tag, release-binary]
    runs-on: ubuntu-latest
    env:
      TAG_NUMBER: ${{ needs.check-tag.outputs.tag_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get latest release info
        id: get-release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            console.log("release.data.assets", release.data.assets)
            core.setOutput("tag", release.data.tag_name);
            core.setOutput("assets", JSON.stringify(release.data.assets));
            console.log("‚úÖ Found release:", release.data.tag_name);
          result-encoding: string

      - name: Download release binaries
        run: |
          echo "assets"
          echo "${{ steps.get-release.outputs.assets }}"
          echo "********"
          echo "${{ steps.get-release.outputs.assets }}"
          mkdir -p binaries
          # echo "${{ steps.get-release.outputs.assets }}" | grep -oP "browser_download_url:\s*'\K[^']+" | while read url; do
            echo "‚¨áÔ∏è Downloading $url"
            curl -L -o "binaries/$(basename "https://github.com/ssonicertinia/temp/releases/download/v1.0.1/temp_linux_amd64")" "https://github.com/ssonicertinia/temp/releases/download/v1.0.1/temp_linux_amd64"
          # done

      - name: List downloaded binaries
        run: |
          ls -lh binaries
          chmod +x ./binaries/temp_linux_amd64
          ls -lh binaries
          ./binaries/temp_linux_amd64


